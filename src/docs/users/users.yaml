openapi: 3.0.0
info:
  title: API de Usuarios
  version: 1.0.0
  description: API para gestionar usuarios.

paths:
  /api/users:
    get:
      summary: Obtiene una lista de todos los usuarios con información completa.
      tags:
        - Users
      responses:
        "200":
          description: Lista de usuarios completa.
          content:
            application/json:
              example:
                status: "success"
                msg: "listado de usuarios"
                payload:
                  - _id: "651ff43fbe791cff7345f3c2"
                    firstName: "admin"
                    lastName: "admin"
                    age: 100
                    email: "sebastianramirezpain@gmail.com"
                    password: "1234"
                    role: "admin"
                    premium: false
                    cartID: "rXkhi1VhHkN0Qg84MFadluaTU"
                    purchase_made: []
                    last_connection: "2023-10-06T15:37:11.120Z"
                    documents: []
                  - _id: "651ff453be791cff7345f3ca"
                    firstName: "Sebastian"
                    lastName: "Pain"
                    age: 35
                    email: "sebastianramirezpain@gmail.com"
                    password: "$2b$10$Js0zou8wXum5Jo1zhF0ZQu9WYmVBbX9jaDphLmodpXY2fhnG3JwEy"
                    role: "user"
                    premium: true
                    cartID: "zOTWOAXfvgqCVTWg2OUxNxRHc"
                    purchase_made: []
                    last_connection: "2023-10-06T15:36:55.148Z"
                    documents: []

        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "something went wrong :("

  /api/users/basic-info:
    get:
      summary: Obtiene una lista de usuarios con información básica.
      tags:
        - Users
      responses:
        "200":
          description: Lista de usuarios con información básica.
          content:
            application/json:
              example:
                status: "success"
                msg: "listado de usuarios (información básica)"
                payload:
                  - firstName: "Sebastian"
                    lastName: "Pain"
                    email: "sebastianramirezpain@gmail.com"
                    role: "admin"
                  - firstName: "Sebastian"
                    lastName: "Ramirez"
                    email: "sebastianramirezpain@gmail.com"
                    role: "user"

        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "something went wrong :("

  /api/users/{uid}:
    put:
      summary: Actualiza un usuario por su ID.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario que se desea actualizar.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            example:
              firstName: "pedro pompin"
              lastName: "NuevoApellido"
              age: 30
              email: "nuevoemail@example.com"
              password: "nuevopassword"
      responses:
        "200":
          description: Usuario actualizado exitosamente.
          content:
            application/json:
              example:
                status: "success"
                msg: "user updated"
                payload:
                  _id: "6520781e977524662351e8a6"
                  firstName: "pedro pompin"
                  lastName: "NuevoApellido"
                  age: 30
                  email: "nuevoemail@example.com"
                  password: "$2b$10$aYmkajGFL2Re4N35T00HuelQSQPHwYkY6QFwUq0/iD0hrTEifidRi"
                  role: "user"
                  premium: false
                  cartID: "9AzfEKzgJ7YPxJwJ1DSZHtEjL"
                  purchase_made: []
                  last_connection: "2023-10-06T21:12:03.087Z"
                  documents: []
        "404":
          description: No se encontró el usuario con el ID especificado.
          content:
            application/json:
              example:
                status: "error"
                msg: "user not found"
        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "db server error while updating user"

    delete:
      summary: Elimina un usuario por su ID.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario que se desea eliminar.
          schema:
            type: string
      responses:
        "200":
          description: Usuario eliminado exitosamente.
          content:
            application/json:
              example:
                status: "success"
                msg: "user deleted"
                payload:
                  userToDelet:
                    _id: "652080dd33899a38502fb205"
                    firstName: "Juan"
                    lastName: "Cople"
                    age: 24
                    email: "jcople@gmail.com"
                    password: "$2b$10$Th/Goiz020UJldrPrl2J9.4Y./3BSNUCnt/Z2UJHQsMzdvEXe0w/a"
                    role: "user"
                    premium: false
                    cartID: "9YvIiSnMANhUKahMfYVESX4vx"
                    purchase_made: []
                    last_connection: "2023-10-06T21:49:20.555Z"
                    documents: []

        "404":
          description: No se encontró el usuario con el ID especificado.
          content:
            application/json:
              example:
                status: "error"
                msg: "user not found"
        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "something went wrong :("

  /api/users/deleteInactiveUsers:
    delete:
      summary: Elimina usuarios inactivos que no se han conectado en los últimos dos días.
      tags:
        - Users
      responses:
        "200":
          description: Usuarios inactivos eliminados exitosamente.
          content:
            application/json:
              example:
                status: "success"
                msg: "Usuarios inactivos eliminados y notificados por correo electrónico"
                payload:
                  - _id: "6520781e977524662351e8a6"
                    firstName: "Pedro Pompin"
                    lastName: "NuevoApellido"
                    age: 30
                    email: "nuevoemail@example.com"
                    password: "$2b$10$aYmkajGFL2Re4N35T00HuelQSQPHwYkY6QFwUq0/iD0hrTEifidRi"
                    role: "user"
                    premium: false
                    cartID: "9AzfEKzgJ7YPxJwJ1DSZHtEjL"
                    purchase_made: []
                    last_connection: "2023-10-03T21:12:03.087Z"
                    documents: []

        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "something went wrong :("

  /api/users/premium/{uid}:
    get:
      summary: Actualiza el estado premium de un usuario por su ID.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario que se desea actualizar.
          schema:
            type: string
      responses:
        "200":
          description: Estado premium del usuario actualizado exitosamente.
          content:
            application/json:
              example:
                message: "Se ha actualizado correctamente la propiedad premium del usuario a true"
                user:
                  _id: "651ff50bbe791cff7345f40c"
                  firstName: "Sebastian"
                  lastName: "Ramirez"
                  age: 35
                  email: "sebastianramirezpain@gmail.com"
                  password: "$2b$10$C1mLeYUEKK5E31lqsTzjVO4A8CBBYWWwAmMkbUEQtWwLMvBXtikIu"
                  role: "user"
                  premium: true
                  cartID: "rcby1Z5X0ruqfHAQPPNHq3OFj"
                  purchase_made: []
                  last_connection: "2023-10-06T11:52:51.109Z"
                  documents: []
        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "something went wrong :("

  /api/users/role/{uid}:
    get:
      summary: Actualiza el rol de un usuario por su ID.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario que se desea actualizar.
          schema:
            type: string
      responses:
        "200":
          description: Rol del usuario actualizado exitosamente.
          content:
            application/json:
              example:
                message: "Se ha actualizado correctamente la propiedad rol del usuario a admin"
                user:
                  _id: "651ff50bbe791cff7345f40c"
                  firstName: "Gordon"
                  lastName: "Wells"
                  age: 24
                  email: "gwelss@gmail.com"
                  password: "b$10$C1mLeYUEKK5E31lqsTzjVO4A8CBBYWWwAmMkbUEQtWwLMvBXtikIu"
                  role: "admin"
                  premium: false
                  cartID: "rcby1Z5X0ruqfHAQPPNHq3OFj"
                  purchase_made: []
                  last_connection: "2023-10-06T11:52:51.109Z"
                  documents: []
        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "something went wrong :("

  /api/users/{uid}/profile:
    post:
      summary: Sube una foto de perfil para un usuario. Devuelve un HTML con el perfil del usuario.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario al que se le actualizará la foto de perfil.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profileImage:
                  type: string
                  format: binary
                  description: Imagen de perfil a subir (formato binario).
      responses:
        "200":
          description: Foto de perfil subida exitosamente.
          content:
            text/html:
              example: "<html><body>Perfil de usuario actualizado con éxito.</body></html>"
        "500":
          description: Error interno del servidor.
          content:
            application/json:
              example:
                status: "error"
                msg: "Error al subir la imagen de perfil."

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: ID del usuario
        firstName:
          type: string
          description: Nombre del usuario
        lastName:
          type: string
          description: Apellido del usuario
        age:
          type: integer
          description: Edad del usuario
        email:
          type: string
          description: Correo electrónico del usuario
        password:
          type: string
          description: Contraseña del usuario (hash)
        role:
          type: string
          description: Rol del usuario
        premium:
          type: boolean
          description: Indica si el usuario es premium
        cartID:
          type: string
          description: ID del carrito del usuario
        purchase_made:
          type: array
          items:
            type: string
          description: Lista de compras realizadas por el usuario
        last_connection:
          type: string
          format: date-time
          description: Fecha y hora de la última conexión del usuario
        documents:
          type: array
          items:
            type: string
          description: Lista de documentos relacionados con el usuario